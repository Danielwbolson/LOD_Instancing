using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace MinVR
{
	/**
	 * Genertates fake VREvents for non-Unity built-in inputs (like the events from Optitrak or the buttons on the stylus).
	 * This is only for use during debugging on your laptop. Make sure to not to use the script when you deploy your app!
	 * 
	 * To make debugging VR apps easier, you can use the mouse and keyboard to create 'fake' input for two trackers.
	 * "Press the '1' or '2' key to switch between controlling tracker1 or tracker2. Move the mouse around the screen
	 * to move the 3D position of that tracker within a plane parallel to the screen.  Hold down 'left shift' while
	 * moving the mouse vertically to change the 3D depth. Hold 'x', 'y', or 'z' while moving the mouse horizontally
	 * to rotate the tracker around the X, Y, or Z axis. 
	 */
	public class VRFakeTracker : VRClientInputTracker
	{
		[Tooltip ("Fake head tracking with arrow keys. 'up' moves forward, 'down' moves backward, 'left' rotates left, 'right' rotates right.")]
		public string fakeHeadTrackerEvent = "Head_Move";
		private Vector3 headTrackerPos = new Vector3 (0, 1, -10);
		// the default camera position in Unity
		private Quaternion headTrackerRot = Quaternion.identity;

		[Tooltip ("The name of the VREvent generated by the first fake tracker.")]
		public string fakeTracker1Event = "Brush0_Move";
		private Vector3 tracker1Pos = new Vector3 ();
		private Quaternion tracker1Rot = Quaternion.identity;

		[Tooltip ("The name of the VREvent generated by the second fake tracker.")]
		public string fakeTracker2Event = "Brush1_Move";
		private Vector3 tracker2Pos = new Vector3 ();
		private Quaternion tracker2Rot = Quaternion.identity;

		[Tooltip ("The name of the VREvent generated by the first fake button on the first fake tracker. Press the '1' key and then 'left' click")]
		public string fakeTracker1Button1Event = "Brush0_Bottom_Button";
		private int traker1Btn1State = -1; // -1:none, 0: released, 1: pressed
		[Tooltip ("The name of the VREvent generated by the second fake button on the first fake tracker. Press the '1' key and then 'right' click")]
		public string fakeTracker1Button2Event = "Brush0_Top_Button";
		private int traker1Btn2State = -1; // -1:none, 0: released, 1: pressed
		[Tooltip ("The name of the VREvent generated by the first fake button on the second fake tracker. Press the '2' key and then 'left' click")]
		public string fakeTracker2Button1Event = "Brush1_Bottom_Button";
		private int traker2Btn1State = -1; // -1:none, 0: released, 1: pressed
		[Tooltip ("The name of the VREvent generated by the second fake button on the second fake tracker. Press the '2' key and then 'right' click")]
		public string fakeTracker2Button2Event = "Brush1_Top_Button";
		private int traker2Btn2State = -1; // -1:none, 0: released, 1: pressed

		private int curTracker = 0;
		private float lastx = float.NaN;
		private float lasty = float.NaN;


		/// <summary>
		/// Adds the events generated by Unity's Input class.
		/// </summary>
		/// <param name="eventList">Event list.</param>
		public override void AddEvents(ref List<VREvent> eventList) {
			this.AddHeadTrackerEvent(ref eventList);
			this.AddTrackerEvents(ref eventList);
			this.AddButtonTrackerEvents(ref eventList);
		}


		/// <summary>
		/// Adds the fake head tracker event.
		/// </summary>
		/// <param name="eventList">Event list.</param>
		private void AddHeadTrackerEvent (ref List<VREvent> eventList)
		{
			if (Input.GetKey ("up")) {
				headTrackerPos += 0.1f * Camera.main.transform.forward;
			} else if (Input.GetKey ("down")) {
				headTrackerPos -= 0.1f * Camera.main.transform.forward;
			} else if (Input.GetKey ("left")) {
				headTrackerRot *= Quaternion.AngleAxis (-1.0f, new Vector3 (0f, 1f, 0f));
			} else if (Input.GetKey ("right")) {
				headTrackerRot *= Quaternion.AngleAxis (1.0f, new Vector3 (0f, 1f, 0f));
			}

			Matrix4x4 m3 = Matrix4x4.TRS (headTrackerPos, headTrackerRot, Vector3.one);
			double[] d3 = VRConvert.ToDoubleArray (m3);
			VRDataIndex data3 = new VRDataIndex ();
			data3.AddData ("Transform", d3);
			eventList.Add(new VREvent(fakeHeadTrackerEvent, data3));
		}

		/// <summary>
		/// Adds the fake tracker events.
		/// </summary>
		/// <param name="eventList">Event list.</param>
		private void AddTrackerEvents (ref List<VREvent> eventList)
		{
			float x = Input.mousePosition.x;
			float y = Input.mousePosition.y;
			// first time through
			if (float.IsNaN (lastx)) {
				lastx = x;
				lasty = y;
				return;
			}

			if (Input.GetKeyDown ("1")) {
				curTracker = 0;
			} else if (Input.GetKeyDown ("2")) {
				curTracker = 1;
			}

			if (Input.GetKey ("x")) {
				float angle = 0.1f * (x - lastx);
				if (curTracker == 0) {
					tracker1Rot = Quaternion.AngleAxis (angle, new Vector3 (1f, 0f, 0f)) * tracker1Rot;
				} else if (curTracker == 1) {
					tracker2Rot = Quaternion.AngleAxis (angle, new Vector3 (1f, 0f, 0f)) * tracker2Rot;
				}
			} else if (Input.GetKey ("y")) {
				float angle = 0.1f * (x - lastx);
				if (curTracker == 0) {
					tracker1Rot = Quaternion.AngleAxis (angle, new Vector3 (0f, 1f, 0f)) * tracker1Rot;
				} else if (curTracker == 1) {
					tracker2Rot = Quaternion.AngleAxis (angle, new Vector3 (0f, 1f, 0f)) * tracker2Rot;
				}
			} else if (Input.GetKey ("z")) {
				float angle = 0.1f * (x - lastx);
				if (curTracker == 0) {
					tracker1Rot = Quaternion.AngleAxis (angle, new Vector3 (0f, 0f, 1f)) * tracker1Rot;
				} else if (curTracker == 1) {
					tracker2Rot = Quaternion.AngleAxis (angle, new Vector3 (0f, 0f, 1f)) * tracker2Rot;
				}
			} else if (Input.GetKey ("left shift")) {
				float depth = 0.005f * (y - lasty);
				if (curTracker == 0) {
					tracker1Pos += depth * Camera.main.transform.forward;
				} else if (curTracker == 1) {
					tracker2Pos += depth * Camera.main.transform.forward;
				}
			} else {
				Ray ray = Camera.main.ScreenPointToRay (new Vector3 (x, y, 0f));
				Plane p = new Plane ();
				float dist = 0.0f;
				if (curTracker == 0) {
					p.SetNormalAndPosition (-Camera.main.transform.forward, tracker1Pos);
					if (p.Raycast (ray, out dist)) {
						tracker1Pos = ray.GetPoint (dist);
					}
				} else if (curTracker == 1) {
					p.SetNormalAndPosition (-Camera.main.transform.forward, tracker2Pos);
					if (p.Raycast (ray, out dist)) {
						tracker2Pos = ray.GetPoint (dist);
					}
				}

			}

			// for fake traker 1
			Matrix4x4 m1 = Matrix4x4.TRS (tracker1Pos, tracker1Rot, Vector3.one);
			double[] d1 = VRConvert.ToDoubleArray (m1);
			VRDataIndex data1 = new VRDataIndex ();
			data1.AddData ("Transform", d1);
			eventList.Add(new VREvent (fakeTracker1Event, data1));

			// for fake traker 2
			Matrix4x4 m2 = Matrix4x4.TRS (tracker2Pos, tracker2Rot, Vector3.one);
			double[] d2 = VRConvert.ToDoubleArray (m2);
			VRDataIndex data2 = new VRDataIndex ();
			data2.AddData ("Transform", d2);
			eventList.Add(new VREvent (fakeTracker2Event, data2));

			// 
			this.lastx = x;
			this.lasty = y;
		}

		/// <summary>
		/// Add the fake button tracker events.
		/// </summary>
		/// <param name="eventList">Event list.</param>
		private void AddButtonTrackerEvents (ref List<VREvent> eventList)
		{
			if (Input.GetMouseButtonDown (0)) { // left click
				if (this.curTracker == 0) {
					this.traker1Btn1State = 1;
				} else {
					this.traker2Btn1State = 1;
				}
			} else if (Input.GetMouseButtonDown (1)) { // right click
				if (this.curTracker == 0) {
					this.traker1Btn2State = 1;
				} else {
					this.traker2Btn2State = 1;
				}
			} else if (Input.GetMouseButtonUp (0)) { // left click released
				if (this.curTracker == 0) {
					this.traker1Btn1State = 0;
				} else {
					this.traker2Btn1State = 0;
				}
			} else if (Input.GetMouseButtonUp (1)) { // right click released
				if (this.curTracker == 0) {
					this.traker1Btn2State = 0;
				} else {
					this.traker2Btn2State = 0;
				}
			} else {
				// no mouse click action 
				// -1:none, 0: released, 1: pressed
				this.traker1Btn1State = -1; 
				this.traker1Btn2State = -1;
				this.traker2Btn1State = -1;
				this.traker2Btn2State = -1;
			}

			// posting fake button events
			string fakeBtnEvent = fakeTracker1Button1Event;
			int btnState = traker1Btn1State;
			{ // fake button 1
				if (btnState != -1) {
					VRDataIndex btnDataIdx = new VRDataIndex ();
					btnDataIdx.AddData ("action", btnState);
					eventList.Add (new VREvent (fakeBtnEvent, btnDataIdx));
				}
			}
			fakeBtnEvent = fakeTracker1Button2Event;
			btnState = traker1Btn2State;
			{ // fake button 2
				if (btnState != -1) {
					VRDataIndex btnDataIdx = new VRDataIndex ();
					btnDataIdx.AddData ("action", btnState);
					eventList.Add (new VREvent (fakeBtnEvent, btnDataIdx));
				}
			}
			fakeBtnEvent = fakeTracker2Button1Event;
			btnState = traker2Btn1State;
			{ // fake button 3
				if (btnState != -1) {
					VRDataIndex btnDataIdx = new VRDataIndex ();
					btnDataIdx.AddData ("action", btnState);
					eventList.Add (new VREvent (fakeBtnEvent, btnDataIdx));
				}
			}
			fakeBtnEvent = fakeTracker2Button2Event;
			btnState = traker2Btn2State;
			{ // fake button 4
				if (btnState != -1) {
					VRDataIndex btnDataIdx = new VRDataIndex ();
					btnDataIdx.AddData ("action", btnState);
					eventList.Add (new VREvent (fakeBtnEvent, btnDataIdx));
				}
			}
		}
	}
}
 // namespace MinVR
