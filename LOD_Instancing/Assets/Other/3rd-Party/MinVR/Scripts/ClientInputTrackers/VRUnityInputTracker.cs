using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

namespace MinVR
{
	/**
	 * Genertates VREvents from Unity's inputs (e.g. mouse, keyboard inputs).
	 * 
	 * You can use Unity's built-in input class for your VR apps. This script generates keyboard events for now.
	 * VRMain class can then send these generated events to the server, which then sends to other clients, so everything is synced. 
	 * 
	 * Make sure the function that generate the events are called from an Update function. 
	 * The reasons for generating events through Input class, rather than Event.current on OnGUI():
	 * http://answers.unity3d.com/questions/55496/any-way-to-key-just-keydown-and-just-keyup-events.html
	 * http://www.sophiehoulden.com/super-fast-input-in-unity/
	 * http://forum.unity3d.com/threads/event-keycode-vs-input-getbutton.84574/
	 */
	public class VRUnityInputTracker : VRClientInputTracker
	{
		/// <summary>
		/// The name of the VREvent generated by the KeyCode tracker, typically Unity_KeyCode.
		/// </summary>
		public static readonly string KeyCodeEventName = "Unity_KeyCode";
		/// <summary>
		/// The name of the VRDataIndex field where the KeyCode state data is stored, typically state.
		/// </summary>
		public static readonly string KeyCodeStateField = "state";
		/// <summary>
		/// The name of the VRDataIndex field where the KeyCode value data is stored, typically value.
		/// </summary>
		public static readonly string KeyCodeValueField = "value";
		/// <summary>
		/// The name of the VREvent generated by the mouse scroll delta tracker, typically Unity_ScrollDelta.
		/// </summary>
		public static readonly string MouseScrollEventName = "Unity_ScrollDelta";
		/// <summary>
		/// The name of the VRDataIndex field where the scroll delta value data is stored, typically values.
		/// </summary>
		public static readonly string MouseScrollValueField = "values";


		[Tooltip ("Unity client tracks key code events.")]
		public bool trackKeyCode = true;
		[Tooltip ("Unity client tracks mouse scroll events.")]
		public bool trackMouseScrollDelta = true;


		/// <summary>
		/// Adds the events generated by Unity's Input class.
		/// </summary>
		/// <param name="eventList">Event list.</param>
		public override void AddEvents(ref List<VREvent> eventList) {
			// Key down/up
			if (this.trackKeyCode) {
				foreach(KeyCode kcode in Enum.GetValues(typeof(KeyCode)))
				{
					if (Input.GetKeyDown(kcode)) {
						VRDataIndex dataIdx = new VRDataIndex ();
						dataIdx.AddData (VRUnityInputTracker.KeyCodeStateField, 1);
						dataIdx.AddData (VRUnityInputTracker.KeyCodeValueField, kcode.ToString());
						eventList.Add (new VREvent (VRUnityInputTracker.KeyCodeEventName, dataIdx));
					}
					if (Input.GetKeyUp(kcode)) {
						VRDataIndex dataIdx = new VRDataIndex ();
						dataIdx.AddData (VRUnityInputTracker.KeyCodeStateField, 0);
						dataIdx.AddData (VRUnityInputTracker.KeyCodeValueField, kcode.ToString());
						eventList.Add (new VREvent (VRUnityInputTracker.KeyCodeEventName, dataIdx));
					}
				}
			}

			// Add the event only when a mouse has been scrolled.
			// IMPORTANT Unity's mouse scroll delta is a Vector2.
			if (this.trackMouseScrollDelta) {
				Vector2 delta = Input.mouseScrollDelta;
				if (delta.x != 0.0f || delta.y != 0.0f) {
					VRDataIndex dataIdx = new VRDataIndex ();
					double[] deltaVals = new double[] {delta.x, delta.y};
					dataIdx.AddData (VRUnityInputTracker.MouseScrollValueField, deltaVals);
					eventList.Add (new VREvent (VRUnityInputTracker.MouseScrollEventName, dataIdx));
				}
			}

			// TODO implement other events tracked by Unity's Input class like touch, gyro...
		}
	}
} // namespace MinVR
